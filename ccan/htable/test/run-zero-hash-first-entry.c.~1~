#include <ccan/htable/htable.h>
#include <ccan/htable/htable.c>
#include <ccan/tap/tap.h>
#include <stdbool.h>

struct data {
  size_t key;
};

static size_t hash(const void *e, void *unused) {
  struct data *d = (struct data *)e;

  printf("Hash called.\n");
  return d->key;
}

static bool eq(const void *e, void *k) {
  struct data *d = (struct data *)e;
  size_t *key = (size_t *)k;

  printf("Eq called.\n");
  return (d->key == *key);
}

int main(void) {
  struct htable *table;
  size_t key;

  struct data *d0 = malloc(sizeof(struct data)); d0->key = 0;
  struct data *d1 = malloc(sizeof(struct data)); d1->key = 1;
  struct data *d2 = malloc(sizeof(struct data)); d2->key = 2;
  struct data *d3 = malloc(sizeof(struct data)); d3->key = 3;


  printf("\nTest1\n");
  table = malloc(sizeof(struct htable));
  htable_init(table, hash, NULL);

  htable_add(table, d0->key, d0);
  htable_add(table, d1->key, d1);

  printf("Elems: %d\n", table->elems);
  key = 0;
  printf("Get %d: %zu\n", key, (size_t)htable_get(table, key, eq, &key));
  key = 1;
  printf("Get %d: %zu\n", key, (size_t)htable_get(table, key, eq, &key));

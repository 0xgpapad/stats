#include <ccan/rwbuf/rwbuf.h>
/* Include the C files directly. */
#include <ccan/rwbuf/rebuf.c>
#include <ccan/tap/tap.h>

int main(void)
{
	struct rwbuf_read in;
	char buf[4096];
	char *lines[100], *p;
	int i, fd = open("test/run.c", O_RDONLY);
	
	/* This is how many tests you plan to run */
	plan_tests(3);

	/* Grab ourselves for comparison. */
	buf[read(fd, buf, sizeof(buf))] = '\0';
	lseek(fd, SEEK_SET, 0);

	for (i = 0, p = buf; *p; i++) {
		lines[i] = p;
		p = strchr(p, '\n');
		*p = '\0';
		p++;
	}
	lines[i] = NULL;

	rwbuf_init(&in, fd, malloc(31), 31);
	ok1(in.fd == fd);
	ok1(in.buf_end - in.buf == 31);
	ok1(rwbuf_read(&in, '\n', NULL));
	ok1(in.len >= strlen(lines[0]));
	ok1(memcmp(in.start, lines[0],
		    strlen(lines[0])) == 0);
	rwbuf_consume(&in, strlen(lines[0]));

	ok1(rwbuf_read(&in, '\n', realloc));
	ok1(in.len == strlen(lines[1]));
	ok1(memcmp(in.start, lines[1],
		    strlen(lines[1])) == 0);
	rwbuf_consume(&in, strlen(lines[1]));

	for (i = 2; lines[i]; i++) {
		ok1(rwbuf_read(&in, '\n', realloc));
		ok1(
	
	
	

	ok1(rwbuf_read(&in, '\n', NULL));
	

	/* Simple thing we expect to succeed */
	ok1(some_test())
	/* Same, with an explicit description of the test. */
	ok(some_test(), "%s with no args should return 1", "some_test")
	/* How to print out messages for debugging. */
	diag("Address of some_test is %p", &some_test)
	/* Conditional tests must be explicitly skipped. */
#if HAVE_SOME_FEATURE
	ok1(test_some_feature())
#else
	skip(1, "Don't have SOME_FEATURE")
#endif

	/* This exits depending on whether all tests passed */
	return exit_status();
}

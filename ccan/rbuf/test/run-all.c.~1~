#include <ccan/rbuf/rbuf.h>
/* Include the C files directly. */
#include <ccan/rbuf/rbuf.c>
#include <ccan/tap/tap.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>

int main(void)
{
	struct rbuf in;
	char buf[4096];
	int i, fd = open("test/run.c", O_RDONLY);
	size_t len;
	
	/* This is how many tests you plan to run */
	plan_tests(262);

	/* Grab ourselves for comparison. */
	buf[read(fd, buf, sizeof(buf))] = '\0';
	lseek(fd, SEEK_SET, 0);

	for (i = 0, p = buf; *p; i++) {
		lines[i] = p;
		p = strchr(p, '\n');
		*p = '\0';
		p++;
	}
	lines[i] = NULL;

	rbuf_init(&in, fd, malloc(31), 31);
	ok1(in.fd == fd);
	ok1(in.buf_end - in.buf == 31);
	ok1(rbuf_read(&in, '\n', &len, NULL));
	ok1(in.len > strlen(lines[0]));
	ok1(len == strlen(lines[0])+1);
	ok1(memcmp(in.start, lines[0], strlen(lines[0])) == 0);
	ok1(in.start[len-1] == '\n');
	rbuf_consume(&in, len);

	ok1(rbuf_read(&in, '\n', &len, realloc));
	ok1(len == strlen(lines[1])+1);
	ok1(memcmp(in.start, lines[1], strlen(lines[1])) == 0);
	ok1(in.start[len-1] == '\n');
	rbuf_consume(&in, len);

	for (i = 2; lines[i]; i++) {
		ok1(rbuf_read(&in, '\n', &len, realloc));
		ok1(len == strlen(lines[i])+1);
		ok1(memcmp(in.start, lines[i], strlen(lines[i])) == 0);
		ok1(in.start[len-1] == '\n');
		rbuf_consume(&in, len);
	}

	ok1(rbuf_read(&in, '\n', &len, realloc));
	ok1(len == 0);
	ok1(in.len == 0);
	free(in.buf);

	/* This exits depending on whether all tests passed */
	return exit_status();
}

/* Licensed under BSD-MIT - see LICENSE file for details */
#ifndef CCAN_TAL_BUF_H
#define CCAN_TAL_BUF_H
#include <stdio.h> // For size_t
#include <limits.h> // For UCHAR_MAX

struct tal_buf {
	int fd;

	char *start;
	size_t len;

	char *buf;
	size_t buf_max;
};

struct tal_buf_write {
	struct tal_buf core;
};

struct tal_buf_read {
	struct tal_buf core;
};

/**
 * tal_buf_init - set up a buffer.
 * @buf: the struct tal_buf.
 * @fd: the file descriptor.
 * @buf: the buffer to use.
 * @buf_max: the size of the buffer.
 */
static inline void tal_buf_init(struct tal_buf *buf,
				int fd, char *buf, size_t buf_max)
{
	buf->fd = fd;
	buf->start = buf->buf = buf;
	buf->len = 0;
	buf->buf_max = buf_max;
}

/**
 * enum tal_buf_read_term - when to stop reading into a buffer.
 * TAL_BUF_EOF: read the entire file.
 * TAL_BUF_ANY: stop at any convenient point (ie. partial read OK).
 */
enum tal_buf_read_term {
	TAL_BUF_EOF = UCHAR_MAX + 1,
	TAL_BUF_ANY
};

/**
 * tal_buf_read - read into a buffer.
 * @buf: the struct tal_buf_read
 * @term: the terminating character (or TAL_BUF_EOF or TAL_BUF_ANY).
 */
bool tal_buf_read(struct tal_buf_read *buf, int term);

/**
 * tal_buf_write - write into a buffer.
 * @buf: the struct tal_buf_write.
 */
bool tal_buf_write(struct tal_buf_write *buf);

/**
 * tal_buf_flush - flush the contents of a write buffer.
 * @buf: the struct tal_buf_write
 */
void tal_buf_flush(struct tal_buf_write *buf);


#endif /* CCAN_TAL_BUF_H */
